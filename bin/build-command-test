#!/usr/bin/env node

var miss = require( 'mississippi' )
var glob = require( 'glob' )
var path = require( 'path' )
var _ = require( 'lodash' )

var builtFolder = path.join( '../build-folders/risd-undergraduate-welcome,1risd,1systems_develop/.build' )


miss.pipe(
  usingArguments( { builtFolder: builtFolder } ),
  feedBuiltFolderFiles( { pattern: '**/*.html' } ),
  sink( console.log ),
  // sink(),
  function onComplete ( error ) {
    if ( error ) console.log( error )
  } )

function feedBuiltFolderFiles ( options ) {
  return miss.through.obj( function ( args, enc, next ) {
    var stream = this;
    
    var pattern = path.join( args.builtFolder, options.pattern )
    var globOptions = options.globOptions || {};
    
    var globEmitter = glob.Glob( pattern, globOptions )
    globEmitter.on( 'match', push )
    globEmitter.on( 'end', callNext )

    function push ( file ) { stream.push( file ) }
    function callNext () { next() }

  } )
}

function usingArguments ( args ) { return miss.from.obj( [ args, null ] ) }

/**
 * Sink stream. Used as the last step in a stream pipeline as a stream
 * to write to, that doesn't push anything to be read.
 * @param  {Function} fn?     Optional function to call on the current item.
 * @return {object}   stream  Transform stream that handles incoming objects.
 */
function sink ( fn ) {
  if ( typeof fn !== 'function' ) fn = function noop () {}
  var count = 0;
  var all = []
  return miss.through.obj( function ( args, enc, next ) {
    all.push( args )
    fn( args )
    next()
  }, function () {
    console.log( all.length )
    console.log( _.uniq( all ).length )
  } )
}
