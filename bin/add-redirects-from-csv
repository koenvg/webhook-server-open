#!/usr/bin/env node

// gather employees
// per employee
// - if there is a `.cv` attribute, remove that file from the cdn bucket & edu bucket
// - delete the `.cv` attribute
// - remove the `.cv` attribute
// - save the employee without their .cv


require('dotenv').config()

var fs = require( 'fs' )
var url = require( 'url' )
var miss = require( 'mississippi' )
var Firebase = require( 'firebase' )
var csvParse = require( 'csv-parse' )
var cloudStorage = require( '../libs/cloudStorage.js' )
var usingArguments = require( '../libs/utils.js' ).usingArguments
var sink = require( '../libs/utils.js' ).sink

var csvPath = __dirname + '/../edu-redirects.csv'
var redirectsPath = 'buckets/edu,1risd,1systems/57daae1c-915b-4684-a4ae-544f01cdcc01/dev/settings/redirect';
var redirectsRoot = new Firebase( 'https://' + process.env.FIREBASE + '.firebaseio.com/' + redirectsPath )

miss.pipe(
  usingArguments( { firebaseSecret: process.env.FIREBASE_KEY } ),
  authFirebase( redirectsRoot ),
  feedRedirects(),
  saveRedirect(),
  sink( function ( row ) { console.log( row ) } ),
  function onComplete ( error ) {
    if ( error ) console.log( error )
    process.exit()
  } )

function authFirebase ( fbRef ) {
  return miss.through.obj( function ( args, enc, next ) {
    fbRef.auth( args.firebaseSecret, function ( error ) {
      if ( error ) return next( error )
      next( null, {} )
    } )
  } )
}

function feedRedirects () {
  return miss.through.obj( function ( args, enc, next ) {
    var stream = this;
    miss.pipe(
      fs.createReadStream( csvPath ),
      csvParse(),
      transform(),
      sink( function ( row ) {
        stream.push( row )
      } ),
      function onComplete ( error ) {
        if ( error ) return next( error )
        next();
      } )
  } )

  function transform () {
    return miss.through.obj( function ( row, enc, next ) {
      var pattern = url.parse( row[ 0 ] ).pathname;
      var destination = url.parse( row[ 1 ] ).hostname.indexOf( 'edu.risd.systems' ) >= 0
        ? url.parse( row[ 1 ] ).pathname
        : row[ 1 ];

      if ( pattern === destination ) return next()

      var redirectFor = {
        pattern: pattern,
        destination: destination,
      }

      next( null, redirectFor )
    } )
  }
}

function saveRedirect () {
  return miss.through.obj( function ( row, enc, next ) {

    miss.pipe(
      usingArguments( row ),
      filterExisting(),
      save(),
      sink(),
      function onComplete ( error ) {
        if ( error ) return next( error )
        next()
      } )

  } )

  function filterExisting () {
    return miss.through.obj( function( row, enc, next ) {
      var exists = false;

      redirectsRoot.once( 'value', onValue, onError )

      function onValue ( snapshot ) {
        var redirects = snapshot.val();

        Object.keys( redirects ).forEach( function ( redirectKey ) {
          if ( row.pattern === redirects[ redirectKey ].pattern ) exists = true;
        } )

        if ( exists === false ) next( null, row )
        else next()
      }

      function onError ( error ) { next( error ) }
    } )
  }

  function save () {
    return miss.through.obj( function ( row, enc, next ) {
      var newRedirect = redirectsRoot.push();
      newRedirect.set( row, onComplete )

      function onComplete ( error ) {
        if ( error ) return next( error )
        next( null, row )
      }
    } )
  }
}
